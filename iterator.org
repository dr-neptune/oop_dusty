#+TITLE: The Iterator Pattern

We will cover:
- What design patterns are
- The iterator protocol
- List, set, and dictionary comprehensions
- Generators and coroutines

* Iterators

An iterator is an object with a next() method and a done() method.
The latter returns True if there are no items left in the sequence.

In python, the next method is named __next__ and is called with next(iterator).
Rather than a done method, python's iterator protocol raises StopIteration to notify the loop that it has completed.

* The iterator protocol

#+BEGIN_SRC python
# verbose implementation
class CapitalIterable:
    def __init__(self, string):
        self.string = string

    def __iter__(self):
        return CapitalIterator(self.string)

class CapitalIterator:
    def __init__(self, string):
        self.words = [w.capitalize() for w in string.split()]
        self.index = 0

    def __next__(self):
        if self.index == len(self.words):
            raise StopIteration
        word = self.words[self.index]
        self.index += 1
        return word

    def __iter__(self):
        return self

# use
iterable = CapitalIterator("the quick brown fox jumps over the lazy dog")
iterator = iter(iterable)
while True:
    try:
        print(next(iterator))
    except StopIteration:
        break

# alternatively
for i in iterable:
    print(i)
#+END_SRC

* List Comprehensions

#+BEGIN_SRC python
# lame old way
input_strings = ["1", "5", "28", "131", "3"]

output_integers = []

for num in input_strings:
    output_integers.append(int(num))

print(output_integers)

# super cool list comp way
output_integers = [int(i) for i in input_strings]

# or with predicates
output_integers = [int(i) for i in input_strings if len(i) < 3]
#+END_SRC

* Set and Dictionary Comprehensions

#+BEGIN_SRC python
from collections import namedtuple
from os import replace

Book = namedtuple("Book", "author title genre")

books = [
    Book("Pratchett", "Nightwatch", "fantasy"),
    Book("Pratchett", "Thief Of Time", "fantasy"),
    Book("Le Guin", "The Dispossessed", "scifi"),
    Book("Le Guin", "A Wizard Of Earthsea", "fantasy"),
    Book("Turner", "The Thief", "fantasy"),
    Book("Phillips", "Preston Diamond", "western"),
    Book("Phillips", "Twice Upon A Time", "scifi"),
]

# set comprehension
fantasy_authors = {b.author for b in books if b.genre == "fantasy"}

print(fantasy_authors)

# dict comprehension uses :
fantasy_titles = {b.title: b for b in books if b.genre == "fantasy"}
print(fantasy_titles)
#+END_SRC

* Generator Expressions

Generators don't create a final container object

#+BEGIN_SRC python :tangle warning_checker.py
# parse a log file and output a new log file that only contains the WARNING lines
import sys

inname = sys.argv[1]
outname = sys.argv[2]

with open(inname) as infile:
    with open(outname, "w") as outfile:
        warnings = (l for l in infile if "WARNING" in l)
        for l in warnings:
            outfile.write(l)
#+END_SRC

* Generators

Generator Expressions compress the generator syntax into one line.

#+BEGIN_SRC python
import sys

inname, outname = sys.argv[1:3]

with open(inname) as infile:
    with open(outname) as outfile:
        warnings = (l.replace("\tWARNING", "") for l in infile if "WARNING" in l)
        for l in warnings:
            outfile.write(l)
#+END_SRC

OOP Approach:

#+BEGIN_SRC python
class WarningFilter:
    def __init__(self, insequence):
        self.insequence = insequence

    def __iter__(self):
        return self

    def __next__(self):
        l = self.insequence.readline()
        while l and "WARNING" not in l:
            l = self.insequence.readline()
            if not l:
                raise StopIteration
            return l.replace("\tWARNING", "")

with open(inname) as infile:
    with open(outname, "w") as outfile:
        filter = WarningFilter(infile)
        for l in filter:
            outfile.write(l)
#+END_SRC

Equivalent to the above:

#+BEGIN_SRC python
def warnings_filter(insequence):
    for l in insequence:
        if "WARNING" in l:
            yield l.replace("\tWARNING", "")

with open(inname) as infile:
    with open(outname) as outfile:
        filter = warnings_filter(infile)
        for l in filter:
            outfile.write(l)

print(warnings_filter([]))
#+END_SRC

* Yield items from another iterable

Often when we build a generator function, we end up in a situation where we want to yield data from another iterable object, possibly a list comprehension or generator expression we constructed inside of the generator, or perhaps some external items that we passed into the function.

#+BEGIN_SRC python
# generator can do basic setup before yielding info from another iterable
def warnings_filter(infilename):
    with open(infilename) as infile:
        yield from (
            l.replace("\tWARNING", "") for l in infile if "WARNING" in l
        )

filter = warnings_filter(inname)
with open(outname, "w") as outfile:
    for l in filter:
        outfile.write(l)
#+END_SRC

The itertools.chain function yields data from iterables in sequence until they have all been exhausted.

#+BEGIN_SRC python
# walk a general tree
# uses a filesystem as an example
class File:
    def __init__(self, name):
        self.name = name

class Folder(File):
    def __init__(self, name):
        super().__init__(name)
        self.children = []

root = Folder("")
etc = Folder("etc")
root.children.append(etc)
etc.children.append(File("passwd"))
etc.children.append(File("groups"))
httpd = Folder("httpd")
etc.children.append(httpd)
httpd.children.append(File("http.conf"))
var = Folder("var")
root.children.append(var)
log = Folder("log")
var.children.append(log)
log.children.append(File("messages"))
log.children.append(File("kernel"))

# output every file in the filesystem
def walk(file):
    if isinstance(file, Folder):
        yield file.name + "/"
        for f in file.children:
            yield from walk(f)
        else:
            yield file.name

print(*walk(root))
#+END_SRC

The yield from syntax is a useful shortcut when writing chained generators. It was added to the language to support coroutines.
It is not used that much anymore because its been replaced with async and await syntax.

* Coroutines

#+BEGIN_SRC python
# keep a running tally that can be increased by arbitrary values
def tally():
    score = 0
    while True:
        increment = yield score
        score += increment

white_sox = tally()
blue_jays = tally()

print(next(white_sox))
print(next(blue_jays))

print(white_sox.send(3))
print(blue_jays.send(2))

print(white_sox.send(2))
print(blue_jays.send(4))
#+END_SRC

- yield occurs and the generator pauses
- send() occurs from outside the function and the generator wakes up
- The value sent in is assigned to the left side of the yield statement
- The generator continues processing until it encounters another yield statement

The difference between a generator and a coroutine:
A generator only produces values, while a coroutine can also consume them.

* Back to log parsing

#+BEGIN_SRC python
import re

def match_regex(filename, regex):
    with open(filename) as file:
        lines = file.readlines()
        for line in reversed(lines):
            match = re.match(regex, line)
            if match:
                regex = yield match.groups()[0]

def get_serials(filename):
    ERROR_RE = "XFS ERROR (\[sd[a-z]\])"
    matcher = match_regex(filename, ERROR_RE)
    device = next(matcher)
    while True:
        try:
            bus = matcher.send("(sd \S+) {}.*".format(re.escape(device)))
            serial = matcher.send("{} \(SERIAL=([^)]*)\)".format(bus))
            yield serial
            device = matcher.send(ERROR_RE)
        except StopIteration:
            matcher.close()
            return

for serial_number in get_serials("EXAMPLE_LOG.log"):
    print(serial_number)
#+END_SRC

* Case Study

Given an RGB color definition, what name would humans identify that color as?

We will build a classifier that attempts to divide the RGB space into the basic colors:

- red
- purple
- blue
- green
- yellow
- orange
- gray
- pink

First we render a random color and ask the user to select one of the preceding options to classify it.

#+BEGIN_SRC python :tangle color_tool.py
import random
import tkinter as tk
import csv

class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.grid(stick="news")
        master.columnconfigure(0, weight=1)
        master.rowconfigure(0, weight=1)
        self.create_widgets()
        self.file = csv.writer(open("colors.csv", "a"))

    def create_color_button(self, label, column, row):
        button = tk.Button(self, command=lambda: self.click_color(label), text=label)
        button.grid(column=column, row=row, sticky="news")

    def random_color(self):
        r = random.randint(0, 255)
        g = random.randint(0, 255)
        b = random.randint(0, 255)

        return f"#{r:02x}{g:02x}{b:02x}"

    def create_widgets(self):
        self.color_box = tk.Label(self, bg=self.random_color(), width="30", height="15")
        self.color_box.grid(column=0, columnspan=2, row=0, sticky="news")
        self.create_color_button("Red", 0, 1)
        self.create_color_button("Purple", 1, 1)
        self.create_color_button("Blue", 0, 2)
        self.create_color_button("Green", 1, 2)
        self.create_color_button("Yellow", 0, 3)
        self.create_color_button("Orange", 1, 3)
        self.create_color_button("Pink", 0, 4)
        self.create_color_button("Grey", 1, 4)
        self.quit = tk.Button(self, text="Quit", command=root.destroy, bg="#ffaabb")
        self.quit.grid(column=0, row=5, columnspan=2, sticky="news")

    def click_color(self, label):
        self.file.writerow([label, self.color_box["bg"]])
        self.color_box["bg"] = self.random_color()

root = tk.Tk()
app = Application(master=root)
app.mainloop()
#+END_SRC

I have ran the application above and produced a csv dataset for colors. Now we will write a program that performs the k-nearest-neighbors algorithms

It will perform the following steps in order:

1. Load the sample data from the file and construct a model from it
2. Generate 100 random colors
3. Classify each color and output it to a file in the same format as the input

#+BEGIN_SRC python :tangle knn.py
import csv
from random import randint
from collections import Counter
dataset_file = "colors.csv"

# load the sample data and construct a model from it
def load_colors(filename):
    def hex_to_rgb(hex_color):
        return tuple(int(hex_color[i:i+2], 16) for i in range(1, 6, 2))

    with open(filename) as dataset_file:
        lines = csv.reader(dataset_file)
        for line in lines:
            label, hex_color = line
            yield (hex_to_rgb(hex_color), label)


def generate_colors(count=100):
    for i in range(count):
        yield (randint(0, 255), randint(0, 255), randint(0, 255))


def color_distance(color1, color2):
    channels = zip(color1, color2)
    sum_distance_squared = 0
    for c1, c2 in channels:
        sum_distance_squared += (c1 - c2) ** 2
    return sum_distance_squared

def nearest_neighbors(model_colors, target_colors, num_neighbors=3):
    model_colors = list(model_colors)

    for target in target_colors:
        distances = sorted(
            ((color_distance(c[0], target), c) for c in model_colors)
        )
        yield target, distances[:5]


def name_colors(model_colors, target_colors, num_neighbors=5):
    for target, near in nearest_neighbors(model_colors, target_colors, num_neighbors=5):
        print(target, near)
        name_guess = Counter(n[1] for n in near).most_common()[0][0]
        yield target, name_guess


def write_results(colors, filename="output.csv"):
    with open(filename, "w") as file:
        writer = csv.writer(file)
        for (r, g, b), name in colors:
            writer.writerow([name, f"#{r:02x}{b:02x}{b:02x}"])


def process_colors(dataset_filename="colors.csv"):
    model_colors = load_colors(dataset_filename)
    colors = name_colors(model_colors, generate_colors(), 5)
    write_results(colors)


if __name__ == '__main__':
    process_colors()
#+END_SRC

Another tkinter app to check results:

#+BEGIN_SRC python :tangle check_results.py
import tkinter as tk
import csv

class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.grid(sticky="news")
        master.columnconfigure(0, weight=1)
        master.rowconfigure(0, weight=1)
        self.csv_reader = csv.reader(open("output.csv"))
        self.create_widgets()
        self.total_count = 0
        self.right_count = 0

    def next_color(self):
        return next(self.csv_reader)

    def mk_grid(self, widget, column, row, columnspan=1):
        widget.grid(column=column, row=row, columnspan=columnspan, sticky="news")

    def create_widgets(self):
        color_text, color_bg = self.next_color()

        self.color_box = tk.Label(self, bg=color_bg, width="30", height="15")
        self.mk_grid(self.color_box, 0, 0, 2)

        self.color_label = tk.Label(self, text=color_text, height="3")
        self.mk_grid(self.color_label, 0, 1, 2)

        self.no_button = tk.Button(self, command=self.count_next, text="No")
        self.mk_grid(self.no_button, 0, 2)

        self.yes_button = tk.Button(self, command=self.count_yes, text="Yes")
        self.mk_grid(self.yes_button, 1, 2)

        self.percent_accurate = tk.Label(self, height="3", text="0%")
        self.mk_grid(self.percent_accurate, 0, 3, 2)

        self.quit = tk.Button(self, text="Quit", command=root.destroy, bg="#ffaabb")
        self.mk_grid(self.quit, 0, 4, 2)

    def count_yes(self):
        self.right_count += 1
        self.count_next()

    def count_next(self):
        self.total_count += 1
        percentage = self.right_count / self.total_count
        self.percent_accurate["text"] = f"{percentage:.0%}"
        try:
            color_text, color_bg = self.next_color()
        except StopIteration:
            color_text = "DONE"
            color_bg = "#ffffff"
            self.color_box["text"] = "DONE"
            self.yes_button["state"] = tk.DISABLED
            self.no_button["state"] = tk.DISABLED
        self.color_label["text"] = color_text
        self.color_box["bg"] = color_bg

root = tk.Tk()
app = Application(master=root)
app.mainloop()
#+END_SRC
