#+TITLE: When to Use Object-Oriented Programming

In this chapter we will cover:
- How to recognize objects
- Data and behaviors
- Wrapping data behaviors using properties
- Restricting data using behaviors
- The Don't Repeat Yourself Principle
- Recognizing repeated code


* Treat Objects as Objects

Objects are things that have both data and behavior. If we are working only with data, we are often better of storing it in a data structure. If we are working only with behavior, but no stored data, a simple function is more suitable.

#+BEGIN_SRC python
# start with data
square = [(1, 1), (1, 2), (2, 2), (2, 1)]

# add functionality
import math

def distance(p1: int, p2: int) -> float:
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

def perimeter(polygon):
    perimeter = 0
    points = polygon + [polygon[0]]
    for i in range(len(polygon)):
        perimeter += distance(points[i], points[i + 1])
    return perimeter

# write a better perimeter function
# perimeter is the sum of the distances between two adjacent points in a polygon.
def perimeter(polygon):
    # add first and last
    perimeter = distance(polygon[0], polygon[-1])
    # add all pairwise distances
    for i in range(len(polygon) - 1):
        perimeter += distance(polygon[i], polygon[i + 1])
    return perimeter

# test functional api
print(perimeter(square))

# write OOP version
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def distance(self, p2):
        return math.sqrt((self.x - p2.x) ** 2 + (self.y - p2.y) ** 2)

class Polygon:
    def __init__(self):
        self.vertices = []

    def add_point(self, point):
        self.vertices.append((point))

    def perimeter(self):
        perimeter = 0
        points = self.vertices + [self.vertices[0]]
        for i in range(len(self.vertices)):
            perimeter += points[i].distance(points[i+1])
        return perimeter

square = Polygon()
square.add_point(Point(1, 1))
square.add_point(Point(1, 2))
square.add_point(Point(2, 2))
square.add_point(Point(2, 1))
print(square.perimeter())

# we can make the OO Polygon API as easy to use as the functional implementation
# all we need to do is allow it to be constructed with multiple points
class Polygon:
    def __init__(self, points=None):
        points = points if points else []
        self.vertices = [Point(*point) for point in points if isinstance(point, tuple)]

    def perimeter(self):
        # add first and last
        perimeter = self.vertices[0].distance(self.vertices[-1])
        # add all pairwise distances
        for i in range(len(self.vertices) - 1):
            perimeter += self.vertices[i].distance(self.vertices[i + 1])
        return perimeter



square = Polygon([(1, 1), (1, 2), (2, 2), (2, 1)])
print([i for i in square.vertices])
print(square.perimeter())
#+END_SRC

* Adding Behaviors to Class Data with Properties

Python gives us the property keyword to make methods that look like attributes.

#+BEGIN_SRC python
class Color:
    def __init__(self, rgb_value, name):
        self.rgb_value = rgb_value
        self._name = name

    def _set_name(self, name):
        if not name:
            raise Exception("Invalid Name")
        self._name = name

    def _get_name(self):
        return self._name

    name = property(_get_name, _set_name)

c = Color("#0000ff", "bright red")
print(c.name)
c.name = "red"
print(c.name)
c.name = "" # throw exception
#+END_SRC

* Properties in Detail

Think of the property function as returning an object that proxies any requests to set or access the attribute value through the methods we have specified.

#+BEGIN_SRC python
class Silly:
    def _get_silly(self):
        print("You are getting silly")
        return self._silly

    def _set_silly(self, value):
        print(f"You are making silly {value}")
        self._silly = value

    def _del_silly(self):
        print("Woah, you killed silly!")
        del self._silly

    silly = property(_get_silly, _set_silly, _del_silly, "This is a silly property")

s = Silly()
s.silly = "funny"
print(s.silly)
del s.silly
help(Silly)
#+END_SRC

* Decorators - Another way to create properties


#+BEGIN_SRC python
class Foo:
    @property
    def foo(self):
        return "bar"

    @foo.setter
    def foo(self, value):
        self._foo = value


class Silly:
    @property
    def silly(self):
        """This is a silly property"""
        print("You are getting silly")
        return self._silly

    @silly.setter
    def silly(self, value):
        print(f"You are making silly {value}")
        self._silly = value

    @silly.deleter
    def silly(self):
        print("Woah, you killed silly!")
        del self._silly

s = Silly()
s.silly = "funny"
print(s.silly)
del s.silly
help(Silly)
#+END_SRC

* Deciding when to use properties

A common need for custom behavior is caching a value that is difficult to calculate or expensive to look up. The goal is to store the variable locally to avoid repeated calls to the expensive calculation.

We can do this with a custom getter on the property.

#+BEGIN_SRC python
from urllib.request import urlopen

class WebPage:
    def __init__(self, url):
        self.url = url
        self._content = None

    @property
    def content(self):
        if not self._content:
            print("Retrieving new page...")
            self._content = urlopen(self.url).read()
        return self._content

import time
webpage = WebPage("http://ccphillips.net")
now = time.time()
content1 = webpage.content
print(time.time() - now)
now = time.time()
content2 = webpage.content
print(time.time() - now)
print(content2 == content1)

# custom getters are also useful for attributes that need to be calculated on the fly,
# based on other attributes
class AverageList(list):
    @property
    def average(self):
        return sum(self) / len(self)

a = AverageList([1, 2, 3, 4])
print(a.average)
#+END_SRC

* Manager Objects

We'll write a program that does a file-and-replace action for text files stored in a compressed ZIP file.

The manager object will be responsible for ensuring the following 3 steps occur in order:
1. Unzipping the compressed file
2. Performing the find-and-replace action
3. Zipping up the new files

#+BEGIN_SRC python
import sys
import shutil
import zipfile
from pathlib import Path

class ZipReplace:
    def __init__(self, filename, search_string, replace_string):
        self.filename = filename
        self.search_string = search_string
        self.replace_string = replace_string
        self.temp_directory = Path(f"unzipped-{filename}")

    # manager method
    def zip_find_replace(self):
        self.unzip_files()
        self.find_replace()
        self.zip_files()

    def unzip_files(self):
        self.temp_directory.mkdir()
        with zipfile.ZipFile(self.filename) as zip:
            zip.extractall(self.temp_directory)

    def find_replace(self):
        for filename in self.temp_directory.iterdir():
            with filename.open() as file:
                contents = file.read()
            contents = contents.replace(self.search_string, self.replace_string)
            with filename.open("w") as file:
                file.write(contents)

    def zip_files(self):
        with zipfile.ZipFile(self.filename, "w") as file:
            for filename in self.temp_directory.iterdir():
                file.write(filename, filename.name)
            shutil.rmtree(self.temp_directory)

if __name__ == '__main__':
    ZipReplace(*sys.argv[1:4]).zip_find_replace()
#+END_SRC

* Removing Duplicate Code In Practice

Let's say after writing our code to replace strings in a zip file full of text files, we are later contracted to scale all the images in a zip file to 640x480.

We'll start by demonstrating an inheritance-based soltuion to this problem.
We'll modify our original ZipReplace class into a superclass for processing generic ZIP files:

#+BEGIN_SRC python
import sys
import shutil
import zipfile
from pathlib import Path
from PIL import Image

class ZipProcessor:
    def __init__(self, zipname):
        self.zipname = zipname
        self.temp_directory = Path(f"unzipped-{zipname[:-4]}")

    def process_zip(self):
        self.unzip_files()
        self.process_files()
        self.zip_files()

    def unzip_files(self):
        self.temp_directory.mkdir()
        with zipfile.ZipFile(self.zipname) as zip:
            zip.extractall(self.temp_directory)

    def zip_files(self):
        with zipfile.ZipFile(self.zipname, "w") as file:
            for filename in self.temp_directory.iterdir():
                file.write(filename, filename.name)
        shutil.rmtree(self.temp_directory)


class ZipReplace(ZipProcessor):
    """Takes a zip file full of txt files. Then:
    1. Unzip all the files into a temp directory
    2. Find all instances of search string and replace them with replace_string
    3. Rezip all the files
    """
    def __init__(self, filename, search_string, replace_string):
        super().__init__(filename)
        self.search_string = search_string
        self.replace_string = replace_string

    def process_files(self):
        """Perform a search and replace on all files in the temporary directory"""
        for filename in self.temp_directory.iterdir():
            with filename.open() as file:
                contents = file.read()
            contents = contents.replace(self.search_string, self.replace_string)
            with filename.open("w") as file:
                file.write(contents)


class ScaleZip(ZipProcessor):
    """Extends ZipProcessor to allow rescaling a zip file full of images"""
    def process_files(self):
        """Scale each image in the directory to 640x480"""
        for filename in self.temp_directory.iterdir():
            im = Image.open(str(filename))
            scaled = im.resize((640, 480))
            scaled.save(filename)

if __name__ == '__main__':
    ScaleZip(*sys.argv[1:4]).process_zip()
#+END_SRC

* Case Study

In this case study, we delve into the question "When should I choose an object vs a built in type?". We'll be modeling a Document class that might be used in a text editor or a word processor.

#+BEGIN_SRC python
class Document:
    def __init__(self):
        self.characters = []
        self.cursor = 0
        self.filename = ""

    def insert(self, character):
        self.characters.insert(self.cursor, character)
        self.cursor += 1

    def delete(self):
        del self.characters[self.cursor]

    def save(self):
        with open(self.filename, "w") as f:
            f.write("".join(self.characters))

    def forward(self):
        self.cursor += 1

    def back(self):
        self.cursor -= 1

# quick tests
doc = Document()
doc.filename = "test_document"

for i in "hello":
    doc.insert(i)

print(doc.characters)

doc.back()
doc.delete()
doc.insert("p")
print(doc.characters)
#+END_SRC


#+BEGIN_SRC python

# pull out cursor class
class Cursor:
    def __init__(self, document):
        self.document = document
        self.position = 0

    def forward(self):
        self.position += 1

    def back(self):
        self.position -= 1

    def home(self):
        while self.document.characters[self.position - 1].character != "\n":
            self.position -= 1
            if self.position == 0:
                # got the beginning of file before newline
                break

    def end(self):
        while (self.position < len(self.document.characters)
               and self.document.characters[self.position].character != "\n"):
            self.position += 1


print(["h", "e", "l", "l", "o"][0].character)

class Document:
    def __init__(self):
        self.characters = []
        self.cursor = Cursor(self)
        self.filename = ""

    def insert(self, character):
        if not hasattr(character, "character"):
            character = Character(character)
        self.characters.insert(self.cursor.position, character)
        self.cursor.forward()

    def delete(self):
        del self.characters[self.cursor.position]

    def save(self):
        with open(self.filename, "w") as f:
            f.write("".join(self.characters))

    @property
    def string(self):
        return "".join((str(c) for c in self.characters))

# local tests
d = Document()

for i in "hello\nworld":
    d.insert(i)

print(d.characters)
d.cursor.home()
print(d.cursor.position)

d.insert("*")
print(d.string)
#+END_SRC

Now we can extend it to work for rich text (text that can be bold, underlined, or italic).

#+BEGIN_SRC python
class Character:
    """
    This class allows us to create characters and prefix them with a special
    character when the str() function is applied to them.
    """
    def __init__(self, character, bold=False, italic=False, underline=False):
        assert len(character) == 1
        self.character = character
        self.bold = bold
        self.italic = italic
        self.underline = underline

    def __str__(self):
        bold = "*" if self.bold else ""
        italic = "/" if self.italic else ""
        underline = "_" if self.underline else ""
        return bold + italic + underline + self.character


d = Document()
d.insert("h")
d.insert("e")
d.insert(Character("l", bold=True))
d.insert(Character("l", bold=True))
d.insert("o")
d.insert("\n")
d.insert(Character("w", italic=True))
d.insert(Character("o", italic=True))
d.insert(Character("r", underline=True))
d.insert("l")
d.insert("d")
print(d.string)

d.cursor.home()
d.delete()
d.insert("W")
print(d.string)

d.characters[0].underline = True

print(d.string)
#+END_SRC
