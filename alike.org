#+TITLE: When Objects Are Alike

In this chapter we cover:
- Basic Inheritance
- Inheriting from built-in types
- Multiple Inheritance
- Polymorphism and Duck Typing

* Basic Inheritance

#+BEGIN_SRC python
class Contact:
    all_contacts = []

    def __init__(self, name, email):
        self.name = name
        self.email = email
        Contact.all_contacts.append(self)


# c = Contact("Michael", "mrose@yes")
# d = Contact("Not Michael", "esorm@sey")

print([i.name for i in c.all_contacts])

class Supplier(Contact):
    def order(self, order):
        print(
            "If this were a real system we would send "
            f"'{order}' order to '{self.name}'"
        )

e = Contact("Some Body", "somebody@example.net")
s = Supplier("Sup Plier", "supplier@example.net")

print(e.name, e.email, s.name, s.email)
b.order("I need pliers")
s.order("I need pliers")
#+END_SRC

* Extending Built-ins

We can also add functionality to built-in classes with inheritance.

#+BEGIN_SRC python
# extending the list class
class ContactList(list):
    def search(self, name):
        """Return all contacts that contain the search value in their name"""
        matching_contacts = []
        for contact in self:
            if name in contact.name:
                matching_contacts.append(contact)
        return matching_contacts

class Contact:
    all_contacts = ContactList()

    def __init__(self, name, email):
        self.name = name
        self.email = email
        Contact.all_contacts.append(self)

c1 = Contact("John A", "johna@example.net")
c2 = Contact("John B", "johnb@example.net")
c3 = Contact("Jenna C", "jennac@example.net")

print([c.name for c in Contact.all_contacts.search("John")])

# extending the dict class
class LongNameDict(dict):
    def longest_key(self):
        longest = None
        for key in self:
            if not longest or len(key) > len(longest):
                longest = key
        return longest

longkeys = LongNameDict()
longkeys["hello"] = 1
longkeys["longest yet"] = 5
longkeys["hello2"] = "world"
print(longkeys.longest_key())
#+END_SRC

* Overriding and Super

If we wish to change or add behavior, we could override a method. One way of doing this is through inheritance.

#+BEGIN_SRC python
class Friend(Contact):
    def __init__(self, name, email, phone):
        super().__init__(name, email)
        self.phone = phone
#+END_SRC

* Multiple Inheritance

You probably don't need multiple inheritance.

The simplest and most useful form of multiple inheritance is called a mixin.
A mixin is a superclass that is not intended to exist on its own, but is meant to be inherited by some other class to provide extra functionality.

For example, say we want to add the capability to send an email to self.email.

#+BEGIN_SRC python
# email mixin class
class MailSender:
    def send_mail(self, message):
        print("Sending mail to " + self.email)
        # add email logic here

# make a combination Contact and MailSender class
class EmailableContact(Contact, MailSender):
    pass

e = EmailableContact("John Smith", "jsmith@example.net")

print(Contact.all_contacts)

e.send_mail("Hello, test e-mail")

# example address mixin
class AddressHolder:
    def __init__(self, street, city, state, code):
        self.street = street
        self.city = city
        self.state = state
        self.code = code
#+END_SRC

* The Diamond Problem

We can use the AddressHolder class as a parent of our existing Friend class. The tricky part is that we now have two parent __init__ methods, both of which need to be initialized with different arguments.

#+BEGIN_SRC python
# naive approach
class Friend(Contact, AddressHolder):
    def __init__(self, name, email, phone, street, city, state, code):
        Contact.__init__(self, name, email)
        AddressHolder.__init__(self, street, city, state, code)
        self.phone = phone
#+END_SRC

Multiple Inheritance can run into a problem in which superclasses can reference the same superclass, initializing the super superclass multiple times.

Note: The order in which methods can be called can be adapted on the fly by modifying the __mro__(Method Resolution Order) attribute on the class.

Here is an example of the diamond problem:


#+DOWNLOADED: /tmp/screenshot.png @ 2021-05-24 08:46:50
[[file:The Diamond Problem/screenshot_2021-05-24_08-46-50.png]]

#+BEGIN_SRC python
class BaseClass:
    num_base_calls = 0

    def call_me(self):
        print("Calling method on Base Class")
        self.num_base_calls += 1

class LeftSubClass(BaseClass):
    num_left_calls = 0

    def call_me(self):
        BaseClass.call_me(self)
        print("Calling method on Left SubClass")
        self.num_left_calls += 1

class RightSubClass(BaseClass):
    num_right_calls = 0

    def call_me(self):
        BaseClass.call_me(self)
        print("Calling method on Right SubClass")
        self.num_right_calls += 1

class SubClass(LeftSubClass, RightSubClass):
    num_sub_calls = 0

    def call_me(self):
        LeftSubClass.call_me(self)
        RightSubClass.call_me(self)
        print("Calling method on SubClass")
        self.num_sub_calls += 1

s = SubClass()
s.call_me()

print(s.num_sub_calls,
      s.num_left_calls,
      s.num_right_calls,
      s.num_base_calls)
#+END_SRC

This could lead to some pernicious bugs if the baseclass is doing actual work.
The thing to keep in mind with multiple inheritance is that we only want to call the next method in the class hierarchy, not the parent method.
The super keyword was originally developed to make complicated forms of multiple inheritance possible.
Here is the same code with super:

#+BEGIN_SRC python
class BaseClass:
    num_base_calls = 0

    def call_me(self):
        print("Calling method on Base Class")
        self.num_base_calls += 1

class LeftSubClass(BaseClass):
    num_left_calls = 0

    def call_me(self):
        super().call_me()
        print("Calling method on Left SubClass")
        self.num_left_calls += 1

class RightSubClass(BaseClass):
    num_right_calls = 0

    def call_me(self):
        super().call_me()
        print("Calling method on Right SubClass")
        self.num_right_calls += 1

class SubClass(LeftSubClass, RightSubClass):
    num_sub_calls = 0

    def call_me(self):
        super().call_me()
        print("Calling method on SubClass")
        self.num_sub_calls += 1

s = SubClass()
s.call_me()

print(s.num_sub_calls,
      s.num_left_calls,
      s.num_right_calls,
      s.num_base_calls)
#+END_SRC

* Different Sets of Arguments

When we originally called the init method for Friend we were calling __init__ for both parent classes with different sets of arguments

#+BEGIN_SRC python
class Friend(Contact, AddressHolder):
    def __init__(self, name, email, phone, street, city, state, code):
        Contact.__init__(self, name, email)
        AddressHolder.__init__(self, street, city, state, code)
        self.phone = phone
#+END_SRC

We don't necessarily know which class super is going to try to initialize first.

#+BEGIN_SRC python
# proper version of Friend
class Contact:
    def __init__(self, name="", email="", **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.email = email
        self.all_contacts.append(self)

class AddressHolder:
    def __init__(self, street="", city="", state="", code="", **kwargs):
        super().__init__(**kwargs)
        self.street = street
        self.city = city
        self.state = state
        self.code = code

class Friend:
    def __init__(self, phone="", **kwargs):
        super().__init__(**kwargs)
        self.phone = phone
#+END_SRC

* Polymorphism

Different behaviors happen depending on which subclass is being used, without having to explicitly know what the subclass actually is.

#+BEGIN_SRC python
class AudioFile:
    def __init__(self, filename):
        if not filename.endswith(self.ext):
            raise Exception("Invalid File Format")
        self.filename = filename

class MP3File(AudioFile):
    ext = "mp3"

    def play(self):
        print(f"playing {self.filename} as mp3")

class WavFile(AudioFile):
    ext = "wav"

    def play(self):
        print(f"playing {self.filename} as wav")

class OggFile(AudioFile):
    ext = "ogg"

    def play(self):
        print(f"playing {self.filename} as ogg")

meep = MP3File("moop.mp3")
meep.play()

mep = OggFile("blup.ogg")
mep.play()

mop = WavFile("woobwoobwoob.wav")
mop.play()

# Duck Typing
class FlacFile:
    def __init__(self, filename):
        if not filename.endswith(".flac"):
            raise Exception("Invalid File Format")
        self.filename = filename

    def play(self):
        print(f"playing {self.filename} as flac")

flacka = FlacFile("wackawacka.flac")
flacka.play()
#+END_SRC

* Abstract Base Classes

Abstract Base Classes define a set of methods that a class must implement in order to be considered a duck-type instance of that class.

* Using an Abstract Base Class

#+BEGIN_SRC python
from collections.abc import Container

print(Container.__abstractmethods__)
help(Container.__abstractmethods__)

class OddContainer:
    def __contains__(self, x):
        if not isinstance(x, int) or not x % 2:
            return False
        return True

oc = OddContainer()
print(isinstance(oc, Container))
print(issubclass(OddContainer, Container))

for i in range(0, 10):
    print(i, ":", i in oc)
#+END_SRC

* Creating an Abstract Base Class

Say we want to make a media player with third party plugins. It is advisable in this case to document what API the third-party plugins should provide.

#+BEGIN_SRC python
import abc

class MediaLoader(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def play(self):
        pass

    @abc.abstractproperty
    def ext(self):
        pass

    @classmethod
    def __subclasshook__(cls, C):
        if cls is MediaLoader:
            attrs = set(dir(C))
            if set(cls.__abstractmethods__) <= attrs:
                return True
        return NotImplemented

# fails
class Wav(MediaLoader):
    pass

x = Wav()

# passes
class Ogg(MediaLoader):
    ext = ".ogg"
    def play(self):
        pass

o = Ogg()
#+END_SRC

* Demystifying the Magic

- @classmethod: This decorator marks the method as a class method. It essentially says that the method can be called on a class instead of an instantiated object
- def __subclasshook__(cls, C): This defines the __subclasshook__ class method. This is called by the python interpreter to answer the question: Is this class C a subclass of this class?
- attrs = set(dir(C)): Get the set of abstract methods that the class has, including any parent classes in its class hierarchy
- if set(cls.__abstractmethods__) <= attrs: Check whether the set of abstract methods in this class has been supplied in the candidate class
- return True: if all the abstract methods have been supplied, then the candidate class is a subclass of this class and we return True.
- return NotImplemented: if any of the conditionals have not been met, then use the default mechanism for subclass detection

Now we can define the Ogg class as a subclass of the MediaLoader class without actually extending the MediaLoader class:

#+BEGIN_SRC python
class Ogg():
    ext = ".ogg"
    def play(self):
        print("This will play an ogg file")

print(issubclass(Ogg, MediaLoader))
print(isinstance(Ogg(), MediaLoader))
#+END_SRC

* Case Study

We will be developing an automated grading system for programming assignments.
The system will need to provide a simple class-based interface for course writers to create their assignments and should give a useful error message if it does not fulfill that interface.

We can start by defining the interface that the course authors will need to use.

#+BEGIN_SRC python
class IntroToPython:
    def lesson(self):
        return f"""
        Hello {self.student}. Define two variables,
        an integer named a with value 1
        and a string named b with value 'hello'
        """

    def check(self, code):
        return code == "a = 1\nb = 'hello'"
#+END_SRC

We can start with an abstract base class that defines the interface as follows:

#+BEGIN_SRC python
class Assignment(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def lesson(self, student):
        pass

    @abc.abstractmethod
    def check(self, code):
        pass

    @classmethod
    def __subclasshook__(cls, C):
        if cls is Assignment:
            attrs = set(dir(C))
            if set(cls.__abstractmethods__) <= attrs:
                return True
        return NotImplemented
#+END_SRC

#+BEGIN_SRC python
# we can confirm that the IntroToPython class fulfills this interface
print(issubclass(IntroToPython, Assignment))

class Statistics(Assignment):
    def lesson(self):
        return (
            "Good work so far, "
            + self.student
            + ". Now calculate the average of the numbers "
            + " 1, 5, 18, -3 and assign to a variable named 'avg'"
        )

    def check(self, code):
        import statistics
        code = "import statistics\n" + code
        local_vars = {}
        global_vars = {}
        exec(code, global_vars, local_vars)
        return local_vars.get("avg") == statistics.mean([1, 5, 18, -3])
#+END_SRC

Next we'll create a class that manages how many attempts the student has made at a given assignment:

#+BEGIN_SRC python
class AssignmentGrader:
    def __init__(self, student, AssignmentClass):
        self.assignment = AssignmentClass()
        self.assignment.student = student
        self.attempts = 0
        self.correct_attempts = 0

    def check(self, code):
        self.attempts += 1
        result = self.assignment.check(code)
        if result:
            self.correct_attempts += 1
        return result

    def lesson(self):
        return self.assignment.lesson()
#+END_SRC

Now we can start to put together the Grader class, which is responsible for managing which assignments are available and which one each student is currently working on.

#+BEGIN_SRC python
import uuid

class Grader:
    def __init__(self):
        self.student_graders = {}
        self.assignment_classes = {}

    def register(self, assignment_class):
        if not issubclass(assignment_class, Assignment):
            raise RuntimeError(
                "Your class does not have the right methods"
            )
        id = uuid.uuid4()
        self.assignment_classes[id] = assignment_class
        return id

    def start_assignment(self, student, id):
        """allows a student to start working on an assignment given the id of the assignment"""
        self.student_graders[student] = AssignmentGrader(student, self.assignment_classes[id])

    def get_lesson(self, student):
        """For a given student, return the lesson they are signed up for"""
        assignment = self.student_graders[student]
        return assignment.lesson()

    def check_assignment(self, student, code):
        """For a given student, attempt to solve the lesson with code"""
        assignment = self.student_graders[student]
        return assignment.check(code)

    def assignment_summary(self, student):
        grader = self.student_graders[student]
        return f"""
        {student}'s attempts at {grader.assignment.__class__.__name__}:

        attempts: {grader.attempts}
        correct:  {grader.correct_attempts}
        passed:   {grader.correct_attempts > 0}
        """
#+END_SRC

#+BEGIN_SRC python
# register for courses
grader = Grader()
itp_id = grader.register(IntroToPython)
stat_id = grader.register(Statistics)

# start an intro to python assignment
grader.start_assignment("Tammy", itp_id)
print("Tammy's Lesson:", grader.get_lesson("Tammy"))
print("Tammy's Check:", grader.check_assignment("Tammy", "a = 1; b = 'hello'"))
print("Tammy's Other Check:", grader.check_assignment("Tammy", "a = 1\nb = 'hello'"))
print(grader.assignment_summary("Tammy"))

grader.start_assignment("Jammy", itp_id)
print("Jammy's Lesson:", grader.get_lesson("Jammy"))
print("Jammy's Check:", grader.check_assignment("Jammy", "a = 1; b = 'hello'"))
print("Jammy's Other Check:", grader.check_assignment("Jammy", "a = 1\nb = 'hello'"))
print(grader.assignment_summary("Jammy"))
print(grader.assignment_summary("Tammy"))

# statistics
grader.start_assignment("Tammy", stat_id)
print("Tammy's Lesson:", grader.get_lesson("Tammy"))
print("Tammy's Check:", grader.check_assignment("Tammy", "avg=5.25"))
print("Tammy's Other Check:", grader.check_assignment("Tammy", "avg = statistics.mean([1, 5, 18, -3])"))
print(grader.assignment_summary("Tammy"))
#+END_SRC
