#+TITLE: Testing Object-Oriented Programs

* Unit Testing

#+BEGIN_SRC python :tangle py_unit.py
import unittest


class CheckNumbers(unittest.TestCase):
    def test_int_float(self):
        self.assertEqual(1, 1.0)

    # failing test
    def test_str_float(self):
        self.assertEqual(1, "1")


if __name__ == '__main__':
    unittest.main()
#+END_SRC

* Assertion Methods

#+BEGIN_SRC python
import unittest

def average(seq):
    return sum(seq) / len(seq)


class TestAverage(unittest.TestCase):
    def test_zero(self):
        self.assertRaises(ZeroDivisionError, average, [])

    def test_with_zero(self):
        with self.assertRaises(ZeroDivisionError):
            average([])


if __name__ == '__main__':
    unittest.main()
#+END_SRC

* Reducing Boilerplate and Cleaning Up

#+BEGIN_SRC python :tangle py_unit_2.py
from collections import defaultdict
import unittest

class StatsList(list):
    def mean(self):
        return sum(self) / len(self)

    def median(self):
        if len(self) % 2:
            return self[int(len(self) / 2)]
        else:
            idx = int(len(self) / 2)
            return (self[idx] + self[idx - 1]) / 2

    def mode(self):
        freqs = defaultdict(int)
        for item in self:
            freqs[item] += 1
        mode_freq = max(freqs.values())
        modes = []
        for item, value in freqs.items():
            if value == mode_freq:
                modes.append(item)
        return modes


class TestValidInputs(unittest.TestCase):
    def setUp(self):
        self.stats = StatsList([1, 2, 2, 3, 3, 4])

    def test_mean(self):
        self.assertEqual(self.stats.mean(), 2.5)

    def test_median(self):
        self.assertEqual(self.stats.median(), 2.5)
        self.stats.append(4)
        self.assertEqual(self.stats.median(), 3)

    def test_mode(self):
        self.assertEqual(self.stats.mode(), [2, 3])
        self.stats.remove(2)
        self.assertEqual(self.stats.mode(), [3])


if __name__ == '__main__':
    unittest.main()
#+END_SRC

* Ignoring Broken Tests

#+BEGIN_SRC python
import unittest
import sys

class SkipTests(unittest.TestCase):
    @unittest.expectedFailure
    def test_fails(self):
        self.assertEqual(False, True)

    @unittest.skip("Test is useless")
    def test_skip(self):
        self.assertEqual(False, True)

    @unittest.skipIf(sys.version_info.minor == 4, "broken on 3.4")
    def test_skipif(self):
        self.assertEqual(False, True)

    @unittest.skipUnless(sys.platform.startswith("linux"), "broken unless on linux")
    def test_skipunless(self):
        self.assertEqual(False, True)

if __name__ == '__main__':
    unittest.main()
#+END_SRC

* Testing with Pytest

#+BEGIN_SRC python :tangle py_pyt.py
import pytest

class TestNumbers:
    def test_int_float(self):
        assert 1 == 1.0

    def test_int_str(self):
        assert 1 == "1"
#+END_SRC

* One way to do setup and cleaning

#+BEGIN_SRC python :tangle setup_teardown.py
import pytest

def setup_module(module):
    print(f"Setting up Module: {module.__name__}")

def teardown_module(module):
    print(f"Tearing down Module: {module.__name__}")

def test_a_function():
    print("Running test function")

class BaseTest:
    def setup_class(cls):
        print(f"Setting up Class: {cls.__name__}")

    def teardown_class(cls):
        print(f"Tearing down Class: {cls.__name__}")

    def setup_method(self, method):
        print(f"Setting up Method: {method.__name__}")

    def teardown_method(self, method):
        print(f"Tearing down Method: {method.__name__}")


class TestClass1(BaseTest):
    def test_method(self):
        print("Running Method 1-1")

    def test_method_2(self):
        print("Running Method 2-1")

class TestClass2(BaseTest):
    def test_method(self):
        print("Running Method 2-1")

    def test_method_2(self):
        print("Running Method 2-2")
#+END_SRC

Running the script above as pytest -s setup_teardown.py nets the following output:

#+BEGIN_SRC txt
============================= test session starts ==============================
platform linux -- Python 3.8.6, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /home/michael/Documents/oop_dusty
plugins: xdoctest-0.15.4, Faker-8.1.0, typeguard-2.11.1, cov-2.12.1
collected 5 items

setup_teardown.py Setting up Module: setup_teardown
Running test function
.Setting up Class: TestClass1
Setting up Method: test_method
Running Method 1-1
.Tearing down Method: test_method
Setting up Method: test_method_2
Running Method 2-1
.Tearing down Method: test_method_2
Tearing down Class: TestClass1
Setting up Class: TestClass2
Setting up Method: test_method
Running Method 2-1
.Tearing down Method: test_method
Setting up Method: test_method_2
Running Method 2-2
.Tearing down Method: test_method_2
Tearing down Class: TestClass2
Tearing down Module: setup_teardown


============================== 5 passed in 0.05s ===============================
#+END_SRC

* A completely different way to set up variables

One of the most common uses for the various setup and teardown functions is to ensure certain class or module variables are available with a known value before each test method is run.

Pytest offers a way of doing this known as fixtures.

#+BEGIN_SRC python
import pytest
from stats import StatsList

@pytest.fixture
def valid_stats():
    return StatsList([1, 2, 2, 3, 3, 4])

def test_mean(valid_stats):
    assert valid_stats.mean == 2.5

def test_median(valid_stats):
    assert valid_stats.median() == 2.5
    valid_stats.append(4)
    assert valid_stats.median() == 3

def teset_mode(valid_stats):
    assert valid_stats.mode() == [2, 3]
    valid_stats.remove(2)
    assert valid_stats.mode() == [3]
#+END_SRC

If we implement the fixture as a generator, we can run cleanup code after each test is run.
This provides the equivalent of a teardown method, except on a per-fixture basis.
We can use it to clean up files, close connections, empty lists, or reset queues.

#+BEGIN_SRC python
import pytest
import tempfile
import shutil
import os.path

@pytest.fixture
def temp_dir(request):
    dir = tempfile.mkdtemp()
    print(dir)
    yield dir
    shutil.rmtree(dir)

def test_osfiles(temp_dir):
    os.mkdir(os.path.join(temp_dir, "a"))
    os.mkdir(os.path.join(temp_dir, "b"))
    dir_contents = os.listdir(temp_dir)
    assert len(dir_contents) == 2
    assert "a" in dir_contents
    assert "b" in dir_contents
#+END_SRC

We can pass a scope parameter to create a fixture that lasts longer than one test.
This is useful when setting up an expensive operation that can be reused by multiple tests, as long as the resource reuse
doesn't break the atomic or unit nature of the tests.

Suppose we were to test the following server, and we only want to run one instance of the server in a separate process and have multiple tests connect to that instance:

#+BEGIN_SRC python :tangle echo_server.py
# listens on port 1028.
# when it receives inut, send the same value back
import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(("localhost", 1028))
s.listen(1)

while True:
    client, address = s.accept()
    data = client.recv(1024)
    client.send(data)
    client.close()
#+END_SRC

Then we can make the tests:

#+BEGIN_SRC python :tangle echo_test.py
import subprocess
import socket
import time
import pytest


# run only once for the entire test session
@pytest.fixture(scope="session")
def echoserver():
    print("Loading server")
    p = subprocess.Popen(["python3", "echo_server.py"])
    time.sleep(1)
    yield p
    p.terminate()


@pytest.fixture
def clientsocket(request):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("localhost", 1028))
    yield s
    s.close()


def test_echo(echoserver, clientsocket):
    clientsocket.send(b"abc")
    assert clientsocket.recv(3) == b"abc"


def test_echo2(echoserver, clientsocket):
    clientsocket.send(b"def")
    assert clientsocket.recv(3) == b"def"
#+END_SRC

* Skipping Tests with Pytest

#+BEGIN_SRC python
import sys
import pytest


def test_simple_skip():
    if sys.platform != "fakeos":
        pytest.skip("test only works on fakeOS")
    fakeos.do_something_fake()
    assert fakeos.did_not_happen


# with a decorator
@pytest.mark.skipif("sys.version_info <= (3,0)")
def test_python3():
    assert b"hello".decode() == "hello"
#+END_SRC

* Imitating Expensive Objects

Sometimes we want to test code that requires an object be supplied that is either expensive or difficult to construct.

#+BEGIN_SRC python
import datetime
import redis

class FlightStatusTracker:
    ALLOWED_STATUSES = {"CANCELLED", "DELAYED", "ON TIME"}

    def __init__(self, redis_instance=None):
        self.redis = redis_instance if redis_instance else redis.StrictRedis()

    def change_status(self, flight, status):
        status = status.upper()
        if status not in self.ALLOWED_STATUSES:
            raise ValueError(f"{status} is not a valid status")
        key = f"flightno:{flight}"
        value = f"{datetime.datetime.now().isoformat()}:{status}"
        self.redis.set(key, value)
#+END_SRC

One thing we don't check in our unit tests is that the redis object is properly storing the data. This should instead be checked at the integration or application testing phase.
As a rule, unit tests should be self contained and shouldn't rely on the existence of outside resources, such as a running Redis instance.

Instead, we only need to test that the set() method was called the appropriate number of times and with the appropriate arguments.

#+BEGIN_SRC python
from unittest.mock import Mock
import pytest


@pytest.fixture
def tracker():
    return FlightStatusTracker()


def test_mock_method(tracker):
    # we do need that, monkey patching
    tracker.redis.set = Mock()
    with pytest.raises(ValueError) as ex:
        tracker.change_status("AC101", "lost")
    assert ex.value.args[0] == "LOST is not a valid status"
    assert tracker.redis.set.call_count == 0
#+END_SRC

The mock library provides a patch context manager that allows us to replace attributes on existing libraries with mock objects.
When the context manager exits, the original attribute is automatically restored so as not to impact other test cases.

#+BEGIN_SRC python
import datetime
from unittest.mock import patch


def test_patch(tracker):
    tracker.redis.set = Mock()
    fake_now = datetime.datetime(2015, 4, 1)
    with patch("datetime.datetime") as dt:
        dt.now.return_value = fake_now
        tracker.change_status("AC102", "on time")
        dt.now.assert_called_once_with()
        tracker.redis.set.assert_called_once_with("floghtno:AC102", "2015-04-01T00:00:00|ON TIME")
#+END_SRC

* How much testing is enough?

Code coverage is an estimate of the number of lines of code that are executed by a program.

A popular library is coverage.py
pytest also has a code coverage feature in which you can call coverage.py from pytest with some extra pytest options.

* Case Study

We will walk through test-driven development by writing a small, tested cryptography application.

#+BEGIN_SRC python
initial_str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

encoding_table = ""

for i in range(26):
    encoding_table += initial_str[i:] + initial_str[:i] + "\n"

print("\n\n", encoding_table)
#+END_SRC

ABCDEFGHIJKLMNOPQRSTUVWXYZ
BCDEFGHIJKLMNOPQRSTUVWXYZA
CDEFGHIJKLMNOPQRSTUVWXYZAB
DEFGHIJKLMNOPQRSTUVWXYZABC
EFGHIJKLMNOPQRSTUVWXYZABCD
FGHIJKLMNOPQRSTUVWXYZABCDE
GHIJKLMNOPQRSTUVWXYZABCDEF
HIJKLMNOPQRSTUVWXYZABCDEFG
IJKLMNOPQRSTUVWXYZABCDEFGH
JKLMNOPQRSTUVWXYZABCDEFGHI
KLMNOPQRSTUVWXYZABCDEFGHIJ
LMNOPQRSTUVWXYZABCDEFGHIJK
MNOPQRSTUVWXYZABCDEFGHIJKL
NOPQRSTUVWXYZABCDEFGHIJKLM
OPQRSTUVWXYZABCDEFGHIJKLMN
PQRSTUVWXYZABCDEFGHIJKLMNO
QRSTUVWXYZABCDEFGHIJKLMNOP
RSTUVWXYZABCDEFGHIJKLMNOPQ
STUVWXYZABCDEFGHIJKLMNOPQR
TUVWXYZABCDEFGHIJKLMNOPQRS
UVWXYZABCDEFGHIJKLMNOPQRST
VWXYZABCDEFGHIJKLMNOPQRSTU
WXYZABCDEFGHIJKLMNOPQRSTUV
XYZABCDEFGHIJKLMNOPQRSTUVW
YZABCDEFGHIJKLMNOPQRSTUVWX
ZABCDEFGHIJKLMNOPQRSTUVWXY

Given a keyword, TRAIN, we can encode the message ENCODED IN PYTHON as follows:

1. Repeat the keyword and message together, such that it is easy to map letters from one to the other:
ENCODEDINPYTHON
TRAINTRAINTRAIN

2. For each letter in the plaintext, find the row that begins with that letter in the table

3. Find the column with the letter associated with the keyword letter for the chosen plaintext letter

4. The encoded character is at the intersection of this row and column

XECWQXUIVCRKHWA

* Implementing It

#+BEGIN_SRC python :tangle test_crypt.py
import pytest
from cipher import VigenereCipher, combine_character, separate_character

def test_encode():
    cipher = VigenereCipher("TRAIN")
    encoded = cipher.encode("ENCODEDINPYTHON")
    assert encoded == "XECWQXUIVCRKHWA"

def test_encode_character():
    cipher = VigenereCipher("TRAIN")
    encoded = cipher.encode("E")
    assert encoded == "X"

def test_encode_spaces():
    cipher = VigenereCipher("TRAIN")
    encoded = cipher.encode("ENCODED IN PYTHON")
    assert encoded == "XECWQXUIVCRKHWA"

def test_encode_lowercase():
    cipher = VigenereCipher("TRain")
    encoded = cipher.encode("encoded in Python")
    assert encoded == "XECWQXUIVCRKHWA"

def test_combine_character():
    assert combine_character("E", "T") == "X"
    assert combine_character("N", "R") == "E"

def test_extend_keyword():
    cipher = VigenereCipher("TRAIN")
    extended = cipher.extend_keyword(16)
    assert extended == "TRAINTRAINTRAINT"

def test_separate_character():
    assert separate_character("X", "T") == "E"
    assert separate_character("E", "R") == "N"

def test_decode():
    cipher = VigenereCipher("TRAIN")
    decoded = cipher.decode("XECWQXUIVCRKHWA")
    assert decoded == "ENCODEDINPYTHON"
#+END_SRC

#+BEGIN_SRC python :tangle cipher.py
class VigenereCipher:
    def __init__(self, keyword):
        self.keyword = keyword

    def _code(self, text, combine_func):
        text = text.replace(" ", "").upper()
        combined = []
        keyword = self.extend_keyword(len(text))
        for p,k in zip(text, keyword):
            combined.append(combine_func(p,k))
        return "".join(combined)

    def encode(self, plaintext):
        return self._code(plaintext, combine_character)

    def extend_keyword(self, number):
        repeats = number // len(self.keyword) + 1
        return (self.keyword * repeats)[:number]

    def decode(self, ciphertext):
        return self._code(ciphertext, separate_character)

def combine_character(plain, keyword):
    plain = plain.upper()
    keyword = keyword.upper()
    plain_num = ord(plain) - ord("A")
    keyword_num = ord(keyword) - ord("A")
    return chr(ord("A") + (plain_num + keyword_num) % 26)

def separate_character(cypher, keyword):
    cypher = cypher.upper()
    keyword = keyword.upper()
    cypher_num = ord(cypher) - ord("A")
    keyword_num = ord(keyword) - ord("A")
    return chr(ord("A") + (cypher_num - keyword_num) % 26)
#+END_SRC

* Guide

Think carefully about the values that are somehow different, such as the following, for example:

- empty lists when you expect full ones
- negative numbers, zero, one, or infinity compared to positive integers
- floats that don't round to an exact decimal place
- strings when you expected numerals
- unicode strings when you expected ASCII
- the None value when you expected something meaningful
