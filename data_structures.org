#+TITLE: Python Data Structures

In this chapter, we'll discuss the object oriented features of data structures.
In particular, we'll cover the following topics:

- Tuples and named tuples
- Dataclasses
- Dictionaries
- Lists and Sets
- How and why to extend built in objects
- Three types of queues

* Tuples and Named Tuples

Tuples are used to store data; behavior cannot be associated with a tuple. If we require behavior to manipulate a tuple, we have to pass the tuple into a function that performs the action.

Generally tuples store heterogenous data.

#+BEGIN_SRC python
stock = "GOOG", 9001.42, 9002.43, 9000.41
stock2 = ("GOOG", 9001.42, 9002.43, 9000.41)

print(stock)

import datetime as dt
from functools import total_ordering

def middle(stock, date):
    symbol, current, high, low = stock
    return (((high + low) / 2), date)

mid_value, date = middle(stock, dt.date(2020, 1, 1))

print(mid_value)

# tuple unpacking
print(stock)
high = stock[2]
print(high)
print(stock[1:3])
#+END_SRC

* Named Tuples

Named tuples are perfect for data only representations.

#+BEGIN_SRC python
from collections import namedtuple

Stock = namedtuple("Stock", ["symbol", "current", "high", "low"])
stock = Stock("GOOG", 177.46, high=178.67, low=175.79)

print(stock.high)
#+END_SRC

* DataClasses

Dataclasses are basically regular objects with a clean syntax for predefining attributes.

There are a few ways to create one.

The simplest is to use a similar construct to that used for named tuples:

#+BEGIN_SRC python
from dataclasses import make_dataclass

Stock = make_dataclass("Stock", ["symbol", "current", "high", "low"])
stock = Stock("FB", 177.46, high=178.67, low=175.79)

# once instantiated, the dataclass object can be used like any regular class
print(stock)
print(stock.current)
stock.unexpected_attribute = "allowed"
print(stock.unexpected_attribute)
#+END_SRC

Another, more common way to make a dataclass is with a decorator

#+BEGIN_SRC python
from dataclasses import dataclass

@dataclass
class StockDecorated:
    name: str
    current: float
    high: float
    low: float

@dataclass
class StockDefaults:
    name: str
    current: float = 0.0
    high: float = 0.0
    low: float = 0.0

print(StockDefaults("FB"))
print(StockDecorated("FN", 176.46, 178.67, 175.79))

# we can also add ordering
@dataclass(order=True)
class StockOrdered:
    name: str
    current: float = 0.0
    high: float = 0.0
    low: float = 0.0

so_1 = StockOrdered("FN", 176.46, 178.67, 175.79)
so_2 = StockOrdered("FN")
so_3 = StockOrdered("FN", 178.42, 179.28, 176.39)

print(so_1 < so_2)
print(so_1 > so_2)
print(sorted([so_1, so_2, so_3]))
#+END_SRC

* Dictionaries

#+BEGIN_SRC python
stocks = {
    "GOOG": (1234.00, 1242.54, 1231.06),
    "MSFT": (110.41, 110.45, 109.84)
}

print(stocks["GOOG"])
# try to get with keyerror catch
print(stocks.get("RIM", "NOT FOUND"))

# setdefault for not founds
print(stocks.setdefault("GOOG", "INVALID"))

print(stocks.setdefault("BBRY", (10.87, 10.76, 10.90)))
print(stocks["BBRY"])

for stock, values in stocks.items():
    print(f"{stock} last value is {values[0]}")

# we can use all types of values as keys
random_keys = {}
random_keys["astring"] = "somestring"
random_keys[5] = "aninteger"
random_keys[25.2] = "floats work too"
random_keys[("abc", 123)] = "so do tuples"

class AnObject:
    def __init__(self, avalue):
        self.avalue = avalue

my_obj = AnObject(15)

random_keys[my_obj] = "We can even store objects"

my_obj.avalue = 16

try:
    random_keys[[1, 2, 3]] = "we can't store lists though"
except:
    print("unable to store list\n")

for k, v in random_keys.items():
    print(f"{k} has value {v}")

#+END_SRC

* DefaultDict

#+BEGIN_SRC python
from collections import defaultdict

def letter_frequency(sentence):
    frequencies = defaultdict(int)
    for letter in sentence:
        frequencies[letter] += 1
    return frequencies

print(letter_frequency("recursion ecursion cursion ursion rsion sion ion on n "))

# we can write our own functions and pass them into the defaultdict
num_items = 0

def tuple_counter():
    global num_items
    num_items += 1
    return (num_items, [])


d = defaultdict(tuple_counter)

d["a"][1].append("hello")
d["b"][1].append("world")
d["c"][1].append("!")
print(d)
#+END_SRC

* Counter

#+BEGIN_SRC python
from collections import Counter

def letter_frequency(sentence):
    return Counter(sentence)

print(letter_frequency("barracuda").most_common(2))
#+END_SRC

* Lists

#+BEGIN_SRC python
class WeirdSortee:
    def __init__(self, string, number, sort_num):
        self.string = string
        self.number = number
        self.sort_num = sort_num

    def __lt__(self, object):
        if self.sort_num:
            return self.number < object.number
        return self.string < object.string

    def __repr__(self):
        return f"{self.string}:{self.number}"

a, b, c, d = WeirdSortee("a", 4, True), WeirdSortee("b", 3, True), WeirdSortee("c", 2, True), WeirdSortee("d", 1, True)

l = [a, b, c, d]

l.sort()
print(l)

for i in l:
    i.sort_num = False

l.sort()
print(l)

# other methods:
# __gt__, __eq__, __ne__, __ge__, __lt__, __le__
# alternatively @total_ordering
@total_ordering
class WeirdSortee:
    def __init__(self, string, number, sort_num):
        self.string = string
        self.number = number
        self.sort_num = sort_num

    def __lt__(self, object):
        if self.sort_num:
            return self.number < object.number
        return self.string < object.string

    def __repr__(self):
        return f"{self.string}:{self.number}"

    def __eq__(self, other):
        return all((self.string == other.string,
                    self.number == other.number,
                    self.sort_num == other.sort_num))


# alternatively, sort takes a key arg
l = ["hello", "HELLO", "Helios"]
print(l)
l.sort()
print(l)
l.sort(key=str.lower)
print(l)

# it is common to sort a tuple by an item other than the first in the list
from operator import itemgetter

l = [("h", 4), ("n", 6), ("o", 5), ("p", 1), ("t", 3), ("y", 2)]
l.sort(key=itemgetter(1))
print(l)
#+END_SRC

* Sets

In python, sets can be any hashable object, not just numbers.

#+BEGIN_SRC python
song_library = [
    ("Kazoo Sonata in D-minor", "Andrew Jackson Jihad"),
    ("Shards of Scorched Flesh", "Bob Dylan"),
    ("Turn on Your Lovelight", "Grateful Dead"),
    ("Electric Slide", "People Under the Stairs"),
    ("Love in the time of the Human Papillomavirus", "Andrew Jackson Jihad")
]

artists = set()
for song, artist in song_library:
    artists.add(artist)

print(artists)

first_artists = {"bananas", "in", "pajamas"}
second_artists = {"pajamas", "in", "montauk"}

print(f"""
Union:\t{first_artists.union(second_artists)}
Intersection:\t{first_artists.intersection(second_artists)}
Symmetric Difference:\t{first_artists.symmetric_difference(second_artists)}
""")
#+END_SRC

* Extending built-in functions

When we have a built-in container object that we want to add functionality to, we have two options:
- create a new object which holds that container as an attribute (composition)
  - This is best if all we want to do is use the container to store some objects using that container's features
- subclass the built-in object and add or adapt methods on it to do what we want (inheritance)
  - If we wish to change the way the container works, this might be better

#+BEGIN_SRC python
print(dir(list))
#+END_SRC

#+BEGIN_SRC txt
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
#+END_SRC

* Case Study

We'll be writing a simple link collector which will visit a website and collect every link on every page it finds on that site.

#+BEGIN_SRC html :tangle index.html
<html>
  <body>
    <a href="contact.html">Contact Us</a>
    <a href="blog.html">Blog</a>
    <a href="esme.html">My Dog</a>
    <a href="/hobbies.html">Some Hobbies</a>
    <a href="/contact.html">Contact Again</a>
    <a href="http://www.archlinux.org">A great OS</a>
  </body>
</html>
#+END_SRC

#+BEGIN_SRC bash
python -m http.server
#+END_SRC

#+BEGIN_SRC python :tangle link_collector.py
# connect to a page and parse all the links from that page
from urllib.request import urlopen
from urllib.parse import urlparse, urljoin
import re
import sys

LINK_REGEX = re.compile("<a [^>]*href=['\"]([^'\"]+)['\"][^>]*>")

class LinkCollector:
    def __init__(self, url):
        self.url = "http://+" + urlparse(url).netloc
        self.collected_links = set()
        self.visited_links = set()

    def collect_links(self, path="/"):
        full_url = self.url + path
        self.visited_links.add(full_url)
        page = str(urlopen(full_url).read())
        links = LINK_REGEX.findall(page)
        links = {self.normalize_url(path, link) for link in links}
        self.collected_links = links.union(self.collected_links)
        unvisited_links = links.difference(self.visited_links)
        print(links, self.visited_links, self.collected_links, unvisited_links)
        for link in unvisited_links:
            if link.startswith(self.url):
                self.collect_links(urlparse(link).path)

    def normalize_url(self, path, link):
        if link.startswith("http://"):
            return link
        elif link.startswith("/"):
            return self.url + link
        else:
            return self.url + path.rpartition("/")[0] + "/" + link

if __name__ == '__main__':
    collector = LinkCollector(sys.argv[1])
    collector.collect_links()
    for link in collector.collected_links:
        print(link)
#+END_SRC
