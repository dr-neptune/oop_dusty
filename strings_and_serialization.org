#+TITLE: Strings and Serialization

In this chapter we focus on one of Python's most common objects: the string.

We'll look at:
- The complexities of strings, bytes, and byte arrays
- The ins and outs of string formatting
- A few ways to serialize data
- Regular expressions

* String Manipulation

#+BEGIN_SRC python
print(dir(str))

s = "hello world"
print(s.count("l"))
print(s.find("l"))
print(s.rindex("l"))
print(s.replace("l", "m"))
print(s.partition(" "))
#+END_SRC

* String Formatting

#+BEGIN_SRC python
orders = [("beyond burger", 14, 22), ("fries", 4, 89), ("something hoppy", 7, 19)]

print("\nPRODUCT \tQUANTITY \tPRICE \t\tSUBTOTAL")
for product, price, quantity in orders:
    subtotal = price * quantity
    print(
        f"{product:10s}\t{quantity: ^9d}\t"
        f"${price: <8.2f}\t${subtotal: >7.2f}"
    )
#+END_SRC

* Mutable byte strings

The bytes type is immutable.

#+BEGIN_SRC python
b = bytearray(b"abcdefgh")

b[4:6] = b"\x15\xa3"
print(b)
#+END_SRC

* Regular Expressions

** Matching Patterns

#+BEGIN_SRC python
import re

search_string = "hello world"
pattern = "hello world"
print(re.match(pattern, search_string))
#+END_SRC

The author uses the script below. I'll be using a function instead

#+BEGIN_SRC python :tangle regex_matcher.py
import sys
import re

pattern = sys.argv[1]
search_string = sys.argv[2]
match = re.match(pattern, search_string)

if match:
    print(f"'{search_string}' matches pattern '{pattern}'")
else:
    print(f"'{search_string}' does not match pattern '{pattern}'")
#+END_SRC

#+BEGIN_SRC python

def check_match(pattern, string="hello world"):
    regex = re.match(pattern, string)
    if regex:
        print(f"'{string}' matches pattern '{pattern}'")
        return regex
    else:
        print(f"'{string}' does not match pattern '{pattern}'")


# general
check_match("hello worl")

# string beginning and end
check_match("^hello")
check_match(".*world$")

# character classes
check_match("hel[lm]o world")

# escaping characters
check_match("0\.[0-9]{2}", "0.05")
check_match("\s\d\w", " 1a")

# matching multiple characters
check_match("hel*o")
check_match("hel+o")
check_match("[a-z]+")

# grouping patterns
check_match("abc{3}", "abccc")
check_match("[A-Z][a-z]*( [a-z]+)*\.$", "A good meal.")

# extracting information
match = check_match("^[a-zA-Z.]+@([a-z.]*\.[a-z]+)$", "some.user@example.com")

print(match.group())
print(match.groups()[0])

# findall
print(re.findall("a.", "abacadefagah"))
print(re.findall("a(.)", "abacadefgah"))
print(re.findall("(a)(.)", "abacadefgah"))

# make regex efficient with compile
regex = re.compile("a.")
print(re.findall(regex, "abaracadabara"))
#+END_SRC

* Filesystem Paths

#+BEGIN_SRC python
import os
import pathlib

# os way
print(path := os.path.abspath(os.sep.join([".", "subdir", "subsubdir"])))

# pathlib
path = (pathlib.Path(".") / "subdir" / "subsubdir" / "file.ext").absolute()
print(path)

# count the number of LOC excluding whitespace and comments in
# all python files in the current directory and subdirectory
def count_sloc(dir_path):
    sloc = 0
    for path in dir_path.iterdir():
        if path.name.startswith("."):
            continue
        if path.is_dir():
            sloc += count_sloc(path)
            continue
        if path.suffix != ".py":
            continue
        with path.open() as file:
            for line in file:
                line = line.strip()
                if line and not line.startswith("#"):
                    sloc += 1
    return sloc

# get working directory
root_path = pathlib.Path(".")
print(f"{count_sloc(root_path)} lines of python code")
#+END_SRC

* Serializing Objects

#+BEGIN_SRC python
import pickle

some_data = ["a list", "containing", 5, "values including another list", ["inner", "list"]]

# write
with open("pickled_list", "wb") as file:
    pickle.dump(some_data, file)

# read
with open("pickled_list", "rb") as file:
    loaded_data = pickle.load(file)

print(loaded_data)
print(loaded_data == some_data)
#+END_SRC

* Customizing Pickles

If an attribute is unpicklable, it usually has something to do with time sensitive attributes that it would not make sense to load in the future.
For example, an open network socket, open file, running thread, or database connection.

#+BEGIN_SRC python
# load contents of a web page every hour
from threading import Timer
import datetime
from urllib.request import urlopen

class UpdatedURL:
    def __init__(self, url):
        self.url = url
        self.contents = ""
        self.last_updated = None
        self.update()

    def update(self):
        self.contents = urlopen(self.url).read()
        self.last_updated = datetime.datetime.now()
        self.schedule()

    def schedule(self):
        self.timer = Timer(3600, self.update)
        self.timer.setDaemon(True)
        self.timer.start()

u = UpdatedURL("http://dusty.phillips.codes")

# fails due to timer object
pickle.dumps(u)
#+END_SRC

* Serializing Web Objects

#+BEGIN_SRC python
import json
from typing import Union

class Contact:
    def __init__(self, first, last):
        self.first = first
        self.last = last

    @property
    def full_name(self):
        return(f"{self.first} {self.last}")

c = Contact("John", "Smith")

print(json.dumps(c.__dict__))

# create a custom encoder to add fields
class ContactEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Contact):
            return {
                "is_contact": True,
                "first": obj.first,
                "last": obj.last,
                "full": obj.full_name
            }
        return super().default(obj)

c = Contact("John", "Smith")

print(json.dumps(c, cls=ContactEncoder))

# decoding
def decode_contact(contact: dict) -> Union[Contact, dict]:
    if contact.get("is_contact"):
        return Contact(contact["first"], contact["last"])
    else:
        return contact

ex_data = json.dumps(c, cls=ContactEncoder)

c = json.loads(ex_data, object_hook=decode_contact)
print(c)
print(c.full_name)
#+END_SRC

* Case Study

We will build a regex powered template engine in Python. It will parse a text file (such as an HTML page) and replace certain directives with text calculated from the input to those directives.

Here is the template:

#+BEGIN_SRC txt :tangle template.txt
/** include header.html **/
<h1>This is the title of the front page</h1>
/** include menu.html **/
<p>My name is /** variable name **/.
This is the content of my front page. It goes below the menu.</p>
<table>
<tr><th>Favourite Books</th></tr>
/** loopover book_list **/
<tr><td>/** loopvar **/</td></tr>
/** endloop **/
</table>
/** include footer.html **/
Copyright &copy; Today
#+END_SRC

- include: copy contents of another file here
- variable: insert the contents of a variable here
- loopover: repeat the contents of the loop for a variable that is a list
- endloop: signal the end of looped text
- loopvar: insert a single value from the list being looped over

For variables to be passed in, we use a context file:

#+BEGIN_SRC json :tangle contextfile.txt
{
    "name": "Michael",
    "book_list": [
	"Prometheus Rising",
	"How Not to Die",
	"Homo Deus",
	"Getting Things Done"
    ]
}
#+END_SRC

#+BEGIN_SRC html :tangle header.html
<a href="link1.html">First Link</a>

<a href="link2.html">Second Link</a>
#+END_SRC

#+BEGIN_SRC html :tangle menu.html
<p>The menu mostly contains a lot of pasta</p>
#+END_SRC

#+BEGIN_SRC html :tangle footer.html
<p>This footer is mostly just hot air</p>
#+END_SRC


#+BEGIN_SRC python :tangle template_processor.py
# processing files and grabbing data from the cmd line
import re
import sys
import json
from pathlib import Path

DIRECTIVE_RE = re.compile(
    r"/\*\*\s*(include|variable|loopover|endloop|loopvar)"
    r"\s*([^ *]*)\s*\*\*/"
)

class TemplateEngine:
    def __init__(self, infilename, outfilename, contextfilename):
        self.template = open(infilename).read()
        self.working_dir = Path(infilename).absolute().parent
        self.pos = 0
        self.outfile = open(outfilename, "w")
        with open(contextfilename) as contextfile:
            self.context = json.load(contextfile)

    def process(self):
        """delegate a different method on the class depending on the directive"""
        print("Processing")
        match = DIRECTIVE_RE.search(self.template, pos=self.pos)
        while match:
            self.outfile.write(self.template[self.pos:match.start()])
            directive, argument = match.groups()
            method_name = f"process_{directive}"
            getattr(self, method_name)(match, argument)
            match = DIRECTIVE_RE.search(self.template, pos=self.pos)
        self.outfile.write(self.template[self.pos:])

    def process_include(self, match, argument):
        """adds an include directives code to the template"""
        with (self.working_dir / argument).open() as includefile:
            self.outfile.write(includefile.read())
            self.pos = match.end()

    def process_variable(self, match, argument):
        """finds the given variable and places it in the template"""
        self.outfile.write(self.context.get(argument, ""))
        self.pos = match.end()

    def process_loopover(self, match, argument):
        self.loop_index = 0
        self.loop_list = self.context.get(argument, [])
        self.pos = self.loop_pos = match.end()

    def process_loopvar(self, match, argument):
        self.outfile.write(self.loop_list[self.loop_index])
        self.pos = match.end()

    def process_endloop(self, match, argument):
        self.loop_index += 1
        if self.loop_index >= len(self.loop_list):
            self.pos = match.end()
            del self.loop_index
            del self.loop_list
            del self.loop_pos
        else:
            self.pos = self.loop_pos


if __name__ == '__main__':
    infilename, outfilename, contextname = sys.argv[1:]
    engine = TemplateEngine(infilename, outfilename, contextname)
    engine.process()
#+END_SRC
